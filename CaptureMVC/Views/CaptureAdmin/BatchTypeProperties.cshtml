@model CaptureMVC.Models.CaptureAdminModel
@{
    ViewBag.Title = "BacthTypeProperties";

}
@*@section AddToHead
    {
    <script>
           var DataType = @Html.Raw(Model.TableValue);
    </script>
}*@
<div class="sub_properties_content container-fluid">
    <div class="row row-xs-3">
        <form action="#" method="post" enctype="multipart/form-data" name="form1" id="form1">
            <fieldset>
                <legend>General Info</legend>

                <div class="col-md-2">
                    <div class="img-thumb">
                        <img id="image_icon" src="~/CaptureAdmin/GetImageFromCacheByKey?Key=@ViewData["KEY_CACHE_ICON"].ToString()" data-keycache="@ViewData["KEY_CACHE_ICON"].ToString()" />
                        @*<div class="change_img change_batch_icon"></div>*@
                    </div>
                    <button class="btn-mini btn change_batch_icon" type="button">
                        <i class="glyphicon glyphicon-picture"></i>
                        Change icon ...
                    </button>
                </div>

                <div class="col-md-10 form-horizontal">
                    <div class="control-group">
                        <label class="control-label" for="name">Batch type name</label>
                        <div class="controls">                           
                            @if (@Model.CaptureBatchTypeModel != null)
                            {
                                <input type="text" name="batch_name" id="batch_name" class="form-control" value="@Model.CaptureBatchTypeModel.Name" />
                            }
                            else
                            {
                                <input type="text" id="batch_name" class="form-control">
                            }
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label" for="name">Batch type description</label>
                        <div class="controls">
                            @if (@Model.CaptureBatchTypeModel != null)
                            {
                                <input type="text" name="batch_description" id="batch_description" class="form-control" value="@Model.CaptureBatchTypeModel.Description" />
                            }
                            else
                            {
                                <input type="text" id="batch_description" class="form-control">
                            }
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label" for="name"></label>
                        <div class="controls checkbox">                           
                            @if (@Model.CaptureBatchTypeModel.IsApplyForOutlook)
                            {
                                <input type="checkbox" name="outlook_import" id="outlook_import" value="true" checked />
                            }
                            else
                            {
                                <input type="checkbox" name="outlook_import" id="outlook_import" value="false" />
                                
                            }Apply for Outlook import
                        </div>
                    </div>
                </div>
            </fieldset>
        </form>
    </div>

    <div class="row row-xs-4">
        <div id="panel_index_fields" class="panel panel-default">
            <div class="panel-heading"><i class="glyphicon glyphicon-tasks"></i>&nbsp;Index fields</div>
            <table id="table_indexfield" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th class="span4">Name</th>
                        <th class="span2">Type</th>
                        <th class="span2">Default value</th>
                        <th class="span2">Max lenth</th>
                    </tr>
                </thead>
                <tbody id="table_indexfield_body">
                    @{ foreach (var field_item in @Model.CaptureBatchTypeModel.Fields)
                     {
                         if (field_item.IsSystemField == false)
                         {
                            <tr id="@field_item.Id" class="row_index_field">

                                <td class="td_index_field_name">@field_item.Name</td>

                                <td class="td_index_data_type">@field_item.DataType.ToString()</td>

                                @if (field_item.UseCurrentDate == true)
                                {
                                    <td class="td_index_default_value">{Use current date}</td>
                                }
                                else
                                {
                                    <td class="td_index_default_value">@field_item.DefaultValue</td>
                                }

                                <td class="td_index_maxlength">@field_item.MaxLength</td>
                            </tr>
                         }
                     }
                    }
                </tbody>
            </table>
        </div>

        <div class="span4">
            <button type="button" id="button_add_field" class="btn-small btn-primary">
                <span>Add</span>
                <i class="glyphicon glyphicon-plus"></i>
            </button>
            <button type="button" id="button_edit_field" class="btn-small btn-primary">
                <span>Edit</span>
                <i class="glyphicon glyphicon-pencil"></i>
            </button>
            <button type="button" id="button_delete_field" class="btn-small btn-primary">
                <span>Delete</span>
                <i class="glyphicon glyphicon-trash"></i>
            </button>
        </div>
    </div>

    <div class="row row-xs-4">
        <div id="panel_content_types" class="panel panel-default">
            <div class="panel-heading"><i class="glyphicon glyphicon-briefcase"></i>&nbsp;Content types</div>
            <table id="table_content_types" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th class="span4">Name</th>
                        <th class="span5">Description</th>
                        <th class="span3">OCR template</th>
                    </tr>
                </thead>
                <tbody id="table_content_types_body">
                    @{ 
                        foreach (var docType_item in @Model.CaptureBatchTypeModel.DocTypes)
                        {
                            <tr id="@docType_item.Id" class="row_content">

                                <td class="td_content_name">@docType_item.Name</td>

                                <td class="td_content_description">@docType_item.Description</td>

                                <td class="td_OCRTemplate">
                                    <a href="@Url.Action("OCRConfigure", "CaptureAdmin")?id=@docType_item.Id" class="btn-mini btn ocr_template" id="@docType_item.Id">
                                        <span>Configure</span>
                                        <i class="glyphicon glyphicon-cog"></i>
                                    </a>
                                    <a class="btn-mini btn" id="button_add_field" data-id="@docType_item.Id" data-contenttype_name="@docType_item.Name">
                                        <span>Delete</span>
                                        <i class="glyphicon glyphicon-trash"></i>
                                    </a>
                                </td>
                                @{
                                    var docicon = "KEY_CACHE_" + @docType_item.Id;
                                }
                                <td class="td_content_keyCache hidden">@ViewData[docicon].ToString()</td>
                             </tr>                        
                         }
                    }
                </tbody>
            </table>
        </div>
        <div class="span3">
            <button type="button" id="btn_add_content" class="btn-small btn-primary">
                <span>Add</span>
                <i class="glyphicon glyphicon-plus"></i>
            </button>
            <button type="button" id="btn_edit_content" class="btn-small btn-primary">
                <span>Edit</span>
                <i class="glyphicon glyphicon-pencil"></i>
            </button>
            <button type="button" id="btn_delete_content" class="btn-small btn-primary">
                <span>Delete</span>
                <i class="glyphicon glyphicon-trash"></i>
            </button>
        </div>
    </div>

    <div class="row">
        <div class="panel_button span3 pull-right">
            <button type="button" id="button_save_batchType" class="btn btn-primary pull-left">
                <span>Save</span>
                <i class="glyphicon glyphicon-floppy-disk"></i>
            </button>
            <button type="button" id="button_cancel_batchType" class="btn btn-primary pull-right">
                <span>Close</span>
                <i class="glyphicon glyphicon-ban-circle"></i>
            </button>
        </div>
    </div>
</div>
@*<script>
    @{
    foreach (var field_item in @Model.CaptureBatchTypeModel.Fields){
        if (field_item.DataTypeEnum == Ecm.CaptureDomain.FieldDataType.Picklist)
        {
            foreach(CaptureMVC.Models.PicklistModel item in field_item.Picklists)
            {
            <text>
                var pick = {Id: '@item.Id', FieldId: '@item.FieldId', Value: '@item.Value'};
                pickLists.push(pick);
            </text>
            }
        }

        if (field_item.IsLookup)
        {
            <text>
                var connectionInfo =
                    {
                        "DatabaseType":'@field_item.LookupInfo.ConnectionInfo.DatabaseType',
                        "DatabaseName":'@field_item.LookupInfo.ConnectionInfo.DatabaseName',
                        "Host":'@field_item.LookupInfo.ConnectionInfo.Host',
                        "Username":'@field_item.LookupInfo.ConnectionInfo.Username',
                        "Password":'@field_item.LookupInfo.ConnectionInfo.Password',
                        "Schema":'@field_item.LookupInfo.ConnectionInfo.Schema',
                        "ProviderType":'@field_item.LookupInfo.ConnectionInfo.ProviderType',
                        "Port":'@field_item.LookupInfo.ConnectionInfo.Port'
                    };

                var parameters = [];

                @foreach (CaptureMVC.Models.ParameterModel para in field_item.LookupInfo.Parameters)
                {
                    <text>
                        var p =
                            {
                                "ParameterName": '@para.ParameterName',
                                "ParameterValue":'@para.ParameterValue',
                                "ParameterType":'@para.ParameterType',
                                "Mode":'@para.Mode',
                                "OrderIndex":'@para.OrderIndex'
                            };

                        parameters.push(p);
                    </text>
                }

                var fieldMaps = [];
                @foreach (CaptureMVC.Models.LookupMapModel map in field_item.LookupInfo.FieldMappings)
                {
                    <text>
                        var m =
                            {
                                "ArchiveFieldId": '@map.ArchiveFieldId',
                                "DataColumn":'@map.DataColumn',
                                "Name":'@map.Name',
                                "FieldId":'@map.FieldId'
                            };

                        fieldMaps.push(m);
                    </text>
                }
                var info =
                    {
                        "FieldId":'@field_item.Id',
                        "LookupType": parseInt(@field_item.LookupInfo.LookupType),
                        "SqlCommand": '@field_item.LookupInfo.SqlCommand',
                        "MaxLookupRow": parseInt(@field_item.LookupInfo.MaxLookupRow),
                        "MinPrefixLength":parseInt(@field_item.LookupInfo.MinPrefixLength),
                        "SourceName":'@field_item.LookupInfo.SourceName',
                        "LookupColumn":'@field_item.LookupInfo.LookupColumn',
                        "LookupOperator":'@field_item.LookupInfo.LookupOperator',
                        "ConnectionInfo":connectionInfo,
                        "Parameters":parameters,
                        "FieldMappings":fieldMaps
                    };

                lookupInfos.push(info);
            </text>
        }
    }
}
</script>*@
