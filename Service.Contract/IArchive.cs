using System.Data;
using System.ServiceModel;
using Ecm.Domain;
using System.Collections.Generic;
using System;

namespace Ecm.Service.Contract
{
    /// <summary>
    /// Represent the API for the CloudECM web service.
    /// </summary>
    [ServiceContract]
    public interface IArchive
    {
        /// <summary>
        /// This method is used internally
        /// </summary>
        [OperationContract]
        void Ping();

        [OperationContract]
        void WriteFileToServer(byte[] fileBytes, string fileName);

        #region Security

        /// <summary>
        /// Provide the encrypted password which is used for the password parameters of <see cref="Login"/> and <see cref="ChangePassword"/> methods
        /// </summary>
        /// <param name="password">The non-encrypted password</param>
        /// <returns>The encrypted password</returns>
        /// <remarks>
        /// To use this method, the client proxy must add the user 'NO_USER_C13198AB_01B0_43F0_B527_1490DA6FB93A' in the header of service request message.
        /// </remarks>
        /// <example>
        /// This sample shows how to call the EncryptPassword method by using C# language.
        /// <code>
        ///     class MyClass 
        ///     {
        ///         public static void Main()
        ///         {
        ///             ArchiveClient proxy = new ArchiveClient();
        ///             using (new OperationContextScope(proxy.InnerChannel))
        ///             {
        ///                 AddSecurityHeader("NO_USER_C13198AB_01B0_43F0_B527_1490DA6FB93A", string.Empty);
        ///                 string encryptedPassword = proxy.EncryptPassword("demopassword");
        ///                 //Result: encryptedPassword = "QUVX22gd9VyZ3jm1EE1tjQ==";
        ///             }
        ///         }
        ///         
        ///         private static void AddSecurityHeader(string userName, string password)
        ///         {
        ///             MessageHeader&lt;string&gt; userNameVal = new MessageHeader&lt;string&gt;(userName);
        ///             MessageHeader&lt;string&gt; passwordHashVal = new MessageHeader&lt;string&gt;(password);
        ///             MessageHeader&lt;string&gt; clientHostVal = new MessageHeader&lt;string&gt;("Foo (192.168.0.1)");
        ///         
        ///             MessageHeader userNameHeader = userNameVal.GetUntypedHeader("username", "sec");
        ///             MessageHeader passwordHashHeader = passwordHashVal.GetUntypedHeader("passwordHash", "sec");
        ///             MessageHeader clientHostHeader = clientHostVal.GetUntypedHeader("clientHost", "sec");
        ///         
        ///             OperationContext.Current.OutgoingMessageHeaders.Add(userNameHeader);
        ///             OperationContext.Current.OutgoingMessageHeaders.Add(passwordHashHeader);
        ///             OperationContext.Current.OutgoingMessageHeaders.Add(clientHostHeader);
        ///         }
        ///     }
        /// </code>
        /// </example>
        [OperationContract]
        string EncryptPassword(string password);

        /// <summary>
        /// Login into the CloudECM service.
        /// </summary>
        /// <param name="userName">User name of the login user</param>
        /// <param name="encryptedPassword">The password that is generated by the <see cref="EncryptPassword"/> method</param>
        /// <param name="clientHost">The host name or IP or both of the request machine</param>
        /// <returns><see cref="User"/> object if user login successfully otherwise <b>null</b>.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        /// <description>To use this method, the client proxy must add the user 'NO_USER_C13198AB_01B0_43F0_B527_1490DA6FB93A' in the header of service request message.</description>
        /// </item>
        /// <item>
        /// <description>User object returned by this method will contains the hashed password which will be combined with user name to be used in sub-sequence method calls on the client.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// This sample shows how to call the Login method by using C# language.
        /// <code>
        ///     class MyClass 
        ///     {
        ///         public static void Main()
        ///         {
        ///             ArchiveClient proxy = new ArchiveClient();
        ///             using (new OperationContextScope(proxy.InnerChannel))
        ///             {
        ///                 AddSecurityHeader("NO_USER_C13198AB_01B0_43F0_B527_1490DA6FB93A", string.Empty);
        ///                 string encryptedPassword = proxy.EncryptPassword("demopassword");
        ///                 User loginUser = proxy.Login("demoUser", encryptedPassword, "Foo (192.168.0.1)");
        ///             }
        ///         }
        ///     }
        /// </code>
        /// <br/>
        /// Please reference to the example in <see cref="EncryptPassword"/> method to see the AddSecurityHeader method.
        /// </example>
        [OperationContract]
        User Login(string userName, string encryptedPassword, string clientHost);

        /// <summary>
        /// Change password of the login user
        /// </summary>
        /// <param name="userName">User name of the login user</param>
        /// <param name="oldEncryptedPassword">The old password of the login user. This password must be generated by <see cref="EncryptPassword"/> method.</param>
        /// <param name="newEncryptedPassword">The new password that user want to change to. This password must be generated by <see cref="EncryptPassword"/> method.</param>
        /// <returns><see cref="User"/> object if user change password successfully otherwise <see cref="FaultException"/> is thrown.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        /// <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of the <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        /// <description>User object returned by this method will contains the new hashed password which will be combined with user name to be used in sub-sequence method calls on the client.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// This sample shows how to call the ChangePassword method by using C# language.
        /// <code>
        ///     class MyClass 
        ///     {
        ///         public static void Main()
        ///         {
        ///             AddSecurityHeader("NO_USER_C13198AB_01B0_43F0_B527_1490DA6FB93A", string.Empty);
        ///             string encryptedPassword = proxy.EncryptPassword("demopassword");
        ///             User loginUser = proxy.Login("demoUser", encryptedPassword, "Foo (192.168.0.1)");
        ///             if (loginUser != null)
        ///             {
        ///                 string newEncryptedPassword = proxy.EncryptPassword("newpassword");
        ///                 AddSecurityHeader(loginUser.UserName, loginUser.Password);
        ///                 loginUser = proxy.ChangePassword("demoUser", encryptedPassword, newEncryptedPassword);
        ///             }
        ///         }
        ///     }
        /// </code>
        /// <br/>
        /// Please reference to the example in <see cref="EncryptPassword"/> method to see the AddSecurityHeader method.
        /// </example>
        [OperationContract]
        User ChangePassword(string userName, string oldEncryptedPassword, string newEncryptedPassword);

        /// <summary>
        /// Reset password in case user forgot their password
        /// </summary>
        /// <param name="username">Username of user that want to reset password</param>
        /// <param name="email">Email address of user that want to reset password</param>
        [OperationContract]
        void ResetPassword(string username);
        /// <summary>
        /// Verify exiting user with username and password hash
        /// </summary>
        /// <param name="userName"></param>
        /// <param name="passwordHash"></param>
        /// <returns></returns>
        [OperationContract]
        User VerifyUser(string userName, string passwordHash);
        #endregion

        #region Document type

        /// <summary>
        /// Retrieve all document types that the login user have capture permission. These document types are defined the workflow as well.
        /// </summary>
        /// <returns>
        /// List of <see cref="DocumentType"/> objects that user can use to save the documents belong to into the CloudECM.
        /// </returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        /// <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of the <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<DocumentType> GetCapturedDocumentTypes();

        /// <summary>
        /// Retrieve all document types in the CloundECM
        /// </summary>
        /// <returns>The list of <see cref="DocumentType"/> objects which already defined the workflow and the login user must have the search permission on them.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        /// <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<DocumentType> GetDocumentTypes();

        /// <summary>
        /// Retrieve document type by its id
        /// </summary>
        /// <param name="documentTypeId">The document type id will be retrieved</param>
        /// <returns>The <see cref="DocumentType"/> object which already defined the workflow and the login user must have the search permission on them.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        /// <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        DocumentType GetDocumentType(Guid documentTypeId);

        /// <summary>
        /// Insert or update the document type.
        /// </summary>
        /// <param name="documentType">The document type will be saved. The saved document type requires list of <see cref="FieldMetaData"/> objects as well as its properties.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        Guid SaveDocumentType(DocumentType documentType);

        /// <summary>
        /// Delete document from CloudECM
        /// </summary>
        /// <param name="documentType">The document type will be deleted</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void DeleteDocumentType(DocumentType documentType);

        /// <summary>
        /// Insert or update the OCR template for an existed document type
        /// </summary>
        /// <param name="ocrTemplate">The <see cref="OCRTemplate"/> that will be saved.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// <item>
        ///     <description>The saved <see cref="OCRTemplate"/> object requires <see cref="OCRTemplateZone"/> as well as <see cref="OCRTemplateZone"/> which is contained in <see cref="OCRTemplatePage"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void SaveOCRTemplate(OCRTemplate ocrTemplate);

        /// <summary>
        /// Delete the OCR template of a document type
        /// </summary>
        /// <param name="documentTypeId">The document type Id that user want to delete the OCR template</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void DeleteOCRTemplate(Guid documentTypeId);

        /// <summary>
        /// Retrieve the barcode configuration of a document type
        /// </summary>
        /// <param name="documentTypeId">The document type Id that user want to retrieve the barcode configuration</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<BarcodeConfiguration> GetBarcodeConfigurations(Guid documentTypeId);

        /// <summary>
        /// Insert or update the barcode configuration of a document type
        /// </summary>
        /// <param name="barcodeConfiguration">The barcode configuration that will be saved</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// <item>
        ///     <description>See documentation in <see cref="BarcodeConfiguration"/> class for more information about the configuration.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void SaveBarcodeConfiguration(BarcodeConfiguration barcodeConfiguration);

        /// <summary>
        /// Delete each barcode configuration that was defined for a document type
        /// </summary>
        /// <param name="configurationId">The configuration will be deleted</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void DeleteBarcodeConfiguration(Guid configurationId);

        /// <summary>
        /// Clear all barcode configurations for a document type
        /// </summary>
        /// <param name="documentTypeId">The document type will be cleared the barcode configuration</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void ClearBarcodeConfigurations(Guid documentTypeId);

        #endregion

        #region Document

        /// <summary>
        /// Insert documents into CloudECM system that are belong to the document types that user has capture permission. 
        /// </summary>
        /// <param name="documents">Documents will be inserted into CloudECM</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The inserted <see cref="Document"/> objects require <see cref="DocumentType"/>, <see cref="Page"/>, <see cref="FieldValue"/>, <see cref="Annotation"/> if any.</description>
        /// </item>
        /// <item>
        ///     <description>The <see cref="FaultException"/> exception will be thrown if the login doesn't have capture permission.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void InsertDocuments(List<Document> documents);

        /// <summary>
        /// Update documents into CloudECM system user has permission on the document type which documents are belong to. 
        /// The permission include the <see cref="DocumentTypePermission"/> and <see cref="AnnotationPermission"/> in the <see cref="DocumentType"/> object. Use <see cref="GetDocumentTypes"/> and <see cref="GetDocumentType"/> methods to get <see cref="DocumentType"/> objects
        /// </summary>
        /// <param name="documents">Documents will be updated into CloudECM</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The updated <see cref="Document"/> objects require <see cref="DocumentType"/>. Depend on the permission in <see cref="DocumentTypePermission"/> and <see cref="AnnotationPermission"/> of <see cref="DocumentType"/> object, the associated properites in <see cref="Document"/> objects will be updated, otherwise they will be ignored.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<Document> UpdateDocuments(List<Document> documents);

        /// <summary>
        /// Retrieve a specific document by using its id.
        /// </summary>
        /// <param name="documentId">The Id of document will be retrieved</param>
        /// <returns>The <see cref="Document"/> object if user has the search permission, otherwise <see cref="FaultException"/> exception will be thrown</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        Document GetDocument(Guid documentId);

        /// <summary>
        /// Retrieve a list of documents by using its ids
        /// </summary>
        /// <param name="documentIds">The list of Ids of documents will be retrieved</param>
        /// <returns>The list of <see cref="Document"/> objects if user has search permission, otherwise <see cref="FaultException"/> exception will be thrown</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<Document> GetDocuments(List<Guid> documentIds);

        /// <summary>
        /// Search for documents of one <see cref="DocumentType"/> match the criterias in <see cref="SearchQueryExpression"/> objects which are contained in <see cref="SearchQuery"/> object.
        /// </summary>
        /// <param name="documentTypeId">Document type id that user want to search for documents</param>
        /// <param name="query">Criterias of the search</param>
        /// <param name="pageIndex">Provide paging for the search</param>
        /// <returns>The <see cref="SearchResult"/> object which contains the information of the search result: found documents, has more result, current page index, total document found.
        /// The <see cref="SearchResult"/> object will be returned if the login user have the search permission on searching <see cref="DocumentType"/>, otherwise the <see cref="FaultException"/> exception will be thrown.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        SearchResult RunAdvanceSearch(Guid documentTypeId, SearchQuery query, int pageIndex, int pageSize, string sortColumn, string sortDir);

        /// <summary>
        /// Search for documents across all <see cref="DocumentType"/> has field value match the keyword.
        /// </summary>
        /// <param name="keyword">The keyword of the search</param>
        /// <param name="pageIndex">Provide paging for the search</param>
        /// <returns>
        /// The <see cref="SearchResult"/> objects which contains the information of the search result: found document type, found documents, has more result, current page index, total document found.
        /// If the login user doesn't have any search permission on any document type, the empty object will be returned.
        /// </returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<SearchResult> RunGlobalSearch(string keyword, int pageIndex, int pageSize);

        /// <summary>
        /// Delete document by using its id. The <see cref="FaultException"/> exception will be thrown if user doesn't have the delete permission
        /// </summary>
        /// <param name="documentId">The id of document will be deleted</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void DeleteDocument(Guid documentId);
        /// <summary>
        /// Search for content of documents of one <see cref="DocumentType"/> match the search content text.
        /// </summary>
        /// <param name="documentTypeId">Document type id that user want to search for documents</param>
        /// <param name="text">Content text want to search</param>
        /// <param name="pageIndex">Index of current page</param>
        /// <param name="searchOperator">Condition of search</param>
        /// <returns> object which contains the information of the search result: found documents, has more result, current page index, total document found.
        /// The <see cref="SearchResult"/> object will be returned if the login user have the search permission on searching <see cref="DocumentType"/>, otherwise the <see cref="FaultException"/> exception will be thrown.</returns>
        [OperationContract]
        SearchResult RunContentSearch(Guid documentTypeId, string text, int pageIndex, int pageSize);
        #endregion

        #region Search query 

        /// <summary>
        /// Save the query which is used in <see cref="RunAdvanceSearch"/> method. This query can be retrieved and used for the sub-sequence search call.
        /// </summary>
        /// <param name="searchQuery">The query will be saved.</param>
        /// <returns>The Id of the saved query if user has search permission to the document type, otherwise <see cref="FaultException"/> exception will be thrown</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        Guid SaveQuery(SearchQuery searchQuery);

        /// <summary>
        /// Retrieve all search queries of the current login user againts one document type
        /// </summary>
        /// <param name="documentTypeId">The document type that user want to retrieve all search queries</param>
        /// <returns>List of <see cref="SearchQuery"/> objects if user has search permission to <see cref="DocumentType"/>, otherwise the <see cref="FaultException"/> exception will be thrown.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<SearchQuery> GetSavedQueries(Guid documentTypeId);

        /// <summary>
        /// Retrieve search query of the current login user by query id
        /// </summary>
        /// <param name="queryId">the id of query want to get</param>
        /// <returns><see cref="SearchQuery"/> objects if user has search permission to</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        SearchQuery GetSavedQuery(Guid queryId);

        /// <summary>
        /// Check whether a query name is existed or not on a document type against the login user
        /// </summary>
        /// <param name="documentTypeId">The document type for checking</param>
        /// <param name="queryName">The query name for checking</param>
        /// <returns><b>true</b> if the query name is found, otherwise <b>false</b>. The <see cref="FaultException"/> exception will be thrown if the login user doesn't have the search permission on document type.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        bool QueryExisted(Guid documentTypeId, string queryName);

        /// <summary>
        /// Delete the <see cref="SearchQuery"/> by using its id. The <see cref="FaultException"/> exception will be thrown if user doesn't have the search permission on the document type that this query belong to.
        /// </summary>
        /// <param name="queryId">The query id will be deleted</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void DeleteQuery(Guid queryId);

        #endregion

        #region User

        /// <summary>
        /// Retrieve all users that existed in the CloudECM.
        /// </summary>
        /// <returns>The list of <see cref="User"/> objects </returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<User> GetUsers();

        /// <summary>
        /// Save a user into CloundECM
        /// </summary>
        /// <param name="user">The user will be saved</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        Guid SaveUser(User user);

        /// <summary>
        /// Delete a user out of CloudECM
        /// </summary>
        /// <param name="user">The user will be deleted</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void DeleteUser(User user);

        #endregion

        #region User group

        /// <summary>
        /// Retrieve all user groups that existed in the CloudECM.
        /// </summary>
        /// <returns>The list of <see cref="UserGroup"/> objects </returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<UserGroup> GetUserGroups();

        /// <summary>
        /// Save a user group into CloundECM
        /// </summary>
        /// <param name="userGroup">The user group will be saved</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void SaveUserGroup(UserGroup userGroup);

        /// <summary>
        /// Delete a user group out of CloudECM
        /// </summary>
        /// <param name="userGroup">The user group will be deleted</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void DeleteUserGroup(UserGroup userGroup);
        
        #endregion

        #region Permission

        [OperationContract]
        List<DocumentType> GetDocTypesUnderPermissionConfiguration();

        [OperationContract]
        List<UserGroup> GetUserGroupsUnderPermissionConfiguration();

        /// <summary>
        /// Retrieve the operational permission that a user group is assigned on a document type
        /// </summary>
        /// <param name="userGroup">The user group want to retrieve the permission</param>
        /// <param name="documentType">The document type that user group has permission on.</param>
        /// <returns>The <see cref="DocumentTypePermission"/> object if user group has permission, otherwise <b>null</b>.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        DocumentTypePermission GetDocTypePermission(UserGroup userGroup, DocumentType documentType);

        /// <summary>
        /// Save the permissions of a user group against a document type.
        /// </summary>
        /// <param name="documentTypePermission">The operational permission on a document type of a user group</param>
        /// <param name="annotationPermission">The annotation permission on a document type of a user group</param>
        /// <param name="auuditPermission">The audit permission of a user group</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void SavePermission(DocumentTypePermission documentTypePermission, AnnotationPermission annotationPermission, AuditPermission auuditPermission);

        /// <summary>
        /// Retrieve the annotation permission that a user group is assigned to a document type
        /// </summary>
        /// <param name="userGroup">The user group want to retrieve the permission</param>
        /// <param name="documentType">The document type that user group has permission on.</param>
        /// <returns>The <see cref="AnnotationPermission"/> object if user group has permission, otherwise <b>null</b></returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        AnnotationPermission GetAnnotationPermission(UserGroup userGroup, DocumentType documentType);

        /// <summary>
        /// Retrieve the audit permission of a user group
        /// </summary>
        /// <param name="userGroup">The user group that the login user want to retrieve the permission.</param>
        /// <param name="documentType">The document type that user group has permission on.</param>
        /// <returns>The <see cref="AuditPermission"/> object if the user group has permission, otherwise <b>null</b></returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        AuditPermission GetAuditPermission(UserGroup userGroup, DocumentType documentType);

        /// <summary>
        /// Retrieve the audit permission of an user
        /// </summary>
        /// <param name="user">The user that want to retrieve the permission.</param>
        /// <returns>The <see cref="AuditPermission"/> object if the user has permission, otherwise <b>null</b></returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        AuditPermission GetAuditPermissionByUser(User user);

        #endregion

        //#region Lookup
        
        ///// <summary>
        ///// Retrieve the data the the lookup service retrieve against a field of a document
        ///// </summary>
        ///// <param name="field">The field of document is doing the lookup</param>
        ///// <param name="value">The keyword that the lookup service search for</param>
        ///// <returns>The <see cref="DataTable"/> object contains the found data. The structure of returned <see cref="DataTable"/> object depend on the query statement that administrator define.</returns>
        ///// <remarks>
        ///// <list type="bullet">
        ///// <item>
        /////     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        ///// </item>
        ///// </list>
        ///// </remarks>
        ///// <example>
        ///// See the example in <see cref="ChangePassword"/> to see how to call this method.
        ///// </example>
        //[OperationContract]
        //DataTable GetLookupData(FieldMetaData field, string value);

        ///// <summary>
        ///// Retrieve all datasources of a connection string which is based on a data provider. 
        ///// </summary>
        ///// <param name="connetionString">The connection string to find datasources</param>
        ///// <param name="type">The datasource can be table, view or stored procedure.</param>
        ///// <param name="dataProvider">Currently CloudECM supports 3 types of provider: SQLServer, MS Access or Oracle.</param>
        ///// <returns>List of datasource name and its type.</returns>
        ///// <remarks>
        ///// <list type="bullet">
        ///// <item>
        /////     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        ///// </item>
        ///// </list>
        ///// </remarks>
        ///// <example>
        ///// See the example in <see cref="ChangePassword"/> to see how to call this method.
        ///// </example>
        //[OperationContract]
        //IDictionary<string, LookupDataSourceType> GetDataSource(string connetionString, LookupDataSourceType type, string dataProvider);
        
        ///// <summary>
        ///// Retrieve all parameters in the store procedure
        ///// </summary>
        ///// <param name="connectionString">The connection that store procedure is defined.</param>
        ///// <param name="storedName">The store procedure name that will be extracted parameters</param>
        ///// <param name="dataProvider">Currently CloudECM supports 3 types of provider: SQLServer, MS Access or Oracle.</param>
        ///// <returns>The <see cref="DataTable"/> object that contains the information for the parameters: Name, Order, DataType, Mode.</returns>
        ///// <remarks>
        ///// <list type="bullet">
        ///// <item>
        /////     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        ///// </item>
        ///// </list>
        ///// </remarks>
        ///// <example>
        ///// See the example in <see cref="ChangePassword"/> to see how to call this method.
        ///// </example>
        //[OperationContract]
        //DataTable GetParameters(string connectionString, string storedName, string dataProvider);
        
        ///// <summary>
        ///// Retrieve all columns of a datasource.
        ///// </summary>
        ///// <param name="dataSourceName">The datasource name.</param>
        ///// <param name="connectionString">The connection string that the datasource is defined.</param>
        ///// <param name="type">Type of datasoruce: table, view or stored procedure.</param>
        ///// <param name="dataProvider">Currently CloudECM supports 3 types of provider: SQLServer, MS Access or Oracle.</param>
        ///// <returns>List of <see cref="Dictionary{TKey,TValue}"/> object that contains the name of column as key and datatype of column as value</returns>
        ///// <remarks>
        ///// <list type="bullet">
        ///// <item>
        /////     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        ///// </item>
        ///// </list>
        ///// </remarks>
        ///// <example>
        ///// See the example in <see cref="ChangePassword"/> to see how to call this method.
        ///// </example>
        //[OperationContract]
        //IDictionary<string, string> GetColumns(string dataSourceName, string connectionString, LookupDataSourceType type, string dataProvider);
        
        ///// <summary>
        ///// Test connection string against a provider. This method is used to define the lookup for a field of a document type.
        ///// </summary>
        ///// <param name="connectionString">Connection string will be test.</param>
        ///// <param name="dataProvider">Currently CloudECM supports 3 types of provider: SQLServer, MS Access or Oracle.</param>
        ///// <returns><b>true</b> if the connection is successull, otherwise <b>false</b></returns>
        ///// <remarks>
        ///// <list type="bullet">
        ///// <item>
        /////     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        ///// </item>
        ///// </list>
        ///// </remarks>
        ///// <example>
        ///// See the example in <see cref="ChangePassword"/> to see how to call this method.
        ///// </example>
        //[OperationContract]
        //bool TestConnection(string connectionString, string dataProvider);
        
        ///// <summary>
        ///// Get all database name in a database.
        ///// </summary>
        ///// <param name="connectionString">The connection string will be used to retrieved the database names.</param>
        ///// <param name="dataProvider">Currently CloudECM supports 3 types of provider: SQLServer, MS Access or Oracle.</param>
        ///// <returns>List of database names.</returns>
        ///// <remarks>
        ///// <list type="bullet">
        ///// <item>
        /////     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        ///// </item>
        ///// </list>
        ///// </remarks>
        ///// <example>
        ///// See the example in <see cref="ChangePassword"/> to see how to call this method.
        ///// </example>
        //[OperationContract]
        //List<string> GetDatabaseNames(string connectionString, string dataProvider);
        
        //#endregion

        #region Lookup

        [OperationContract(Name = "LookupData1")]
        DataTable GetLookupData(LookupInfo lookupInfo, Dictionary<string, string> mappingValue);

        [OperationContract]
        DataTable GetLookupData(LookupInfo lookupInfo, string value);

        [OperationContract]
        bool TestConnection(ConnectionInfo connectionInfo);

        [OperationContract]
        bool TestQueryParam(string query, List<string> fieldNames);

        [OperationContract]
        List<string> GetDatabaseNames(ConnectionInfo connectionInfo);

        [OperationContract]
        List<string> GetSchemas(ConnectionInfo connectionInfo);

        [OperationContract]
        List<string> GetTableNames(ConnectionInfo connectionInfo);

        [OperationContract]
        List<string> GetViewNames(ConnectionInfo connectionInfo);

        [OperationContract]
        List<string> GetStoredProcedureNames(ConnectionInfo connectionInfo);

        [OperationContract]
        List<string> GetRuntimeValueParams(string sqlCommand);

        [OperationContract]
        DataTable GetParameterNames(ConnectionInfo connectionInfo, string storedName);

        [OperationContract]
        Dictionary<string, string> GetColummnNames(ConnectionInfo connectionInfo, string sourceName, LookupDataSourceType sourceType);

        [OperationContract]
        LookupInfo GetLookupInfo(Guid fieldId);
        #endregion


        #region Setting

        /// <summary>
        /// Retrieve all system settings.
        /// </summary>
        /// <returns>The <see cref="Setting"/> object.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        Setting GetSettings();

        /// <summary>
        /// Write the setting into the CloudECM.
        /// </summary>
        /// <param name="setting"></param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void WriteSetting(Setting setting);
        
        #endregion

        #region ActionLog

        /// <summary>
        /// Retrieve the action log by using its id
        /// </summary>
        /// <param name="id">The id of action log will be retrieved.</param>
        /// <returns>The <see cref="ActionLog"/> object.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedViewLog permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        ActionLog GetActionLog(Guid id);

        /// <summary>
        /// Retrieve all action log in the system with paging capability.
        /// </summary>
        /// <param name="pageIndex">The page index of the logs</param>
        /// <param name="pageSize">How many items on each page</param>
        /// <param name="totalItems">The total items found.</param>
        /// <returns>List of <see cref="ActionLog"/> objects.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedViewLog permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<ActionLog> GetActionLogs(int pageIndex, int pageSize, out long totalItems);

        /// <summary>
        /// Retrieve all action log in the system.
        /// </summary>
        /// <returns>List of <see cref="ActionLog"/> objects.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedViewLog permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<ActionLog> GetActionLogAll();

        /// <summary>
        /// Search action log base on the criteria defined in the expression with paging capability.
        /// </summary>
        /// <param name="expression">The expression define the criteria for search.</param>
        /// <param name="pageIndex">The page index of the search.</param>
        /// <param name="pageSize">How many items on each page.</param>
        /// <param name="totalItems">The total items found by the search</param>
        /// <returns>List of <see cref="ActionLog"/> objects.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedViewLog permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<ActionLog> SearchActionLogs(string expression, int pageIndex, int pageSize, out long totalItems);

        /// <summary>
        /// Search action log base on the criteria defined in the expression.
        /// </summary>
        /// <param name="expression">The expression define the criteria for search.</param>
        /// <returns>List of <see cref="ActionLog"/> objects.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedViewLog permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract(Name = "SearchActionLog1")]
        List<ActionLog> SearchActionLogs(string expression);

        /// <summary>
        /// Delete a log in the system.
        /// </summary>
        /// <param name="id">The id of the log.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedDeleteLog permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void DeleteLog(Guid id);

        /// <summary>
        /// Retrieve all log that occurs on a specific document.
        /// </summary>
        /// <param name="documentId">The id of the document want to retrieve the log</param>
        /// <returns>List of <see cref="ActionLog"/> objects.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedViewLog permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<ActionLog> GetLogByDocument(Guid documentId);

        /// <summary>
        /// Allow add a log into the system.
        /// </summary>
        /// <param name="message">The log message.</param>
        /// <param name="actionName">The action.</param>
        /// <param name="type">The log occurs on which type of object (Document or Page).</param>
        /// <param name="objectId">The id of the object that the log occurs.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void AddActionLog(string message, ActionName actionName, ObjectType? type,Guid? objectId);

        #endregion

        #region Language
        
        /// <summary>
        /// Retrieve the supported language by its id
        /// </summary>
        /// <param name="languageId">The id of the language will be retrieved.</param>
        /// <returns>The <see cref="Language"/> object</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        Language GetLanguage(Guid languageId);

        /// <summary>
        /// Retrieve all supported languages. 
        /// </summary>
        /// <returns>A list of <see cref="Language"/> objects.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<Language> GetLanguages();

        #endregion

        #region Ambiguous Definition

        /// <summary>
        /// Retrieve all OCR auto correction defined with a language.
        /// </summary>
        /// <param name="languageId">The language that the OCR is doing.</param>
        /// <returns>List of <see cref="AmbiguousDefinition"/> objects</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<AmbiguousDefinition> GetAmbiguousDefinitions(Guid languageId);

        /// <summary>
        /// Retrieve all OCR auto corrections in the CloudECM
        /// </summary>
        /// <returns></returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<AmbiguousDefinition> GetAllAmbiguousDefinitions();

        /// <summary>
        /// Delete OCR auto correction by its id
        /// </summary>
        /// <param name="id">The id of the OCR auto correction</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void DeleteAmbiguousDefinition(Guid id);

        /// <summary>
        /// Add an OCR auto correction on a language into the CloudECM
        /// </summary>
        /// <param name="ambiguousDefinition">The OCR auto correction will be saved</param>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have administration priviledge to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        void SaveAmbiguousDefinition(AmbiguousDefinition ambiguousDefinition);

        #endregion

        #region Version

        /// <summary>
        /// Retrieve the versions of a document
        /// </summary>
        /// <param name="documentId">The id of the document wants to retrieve the versions</param>
        /// <returns>The list of <see cref="DocumentVersion"/> objects which represent the versions of a document.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedAudit permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<DocumentVersion> GetDocumentVersionsByExistingDoc(Guid documentId);

        /// <summary>
        /// Retrieve all versions of documents which are belong to a document type was already deleted.
        /// </summary>
        /// <param name="documentTypeId">The id of the deleted document type</param>
        /// <returns>The list of <see cref="DocumentVersion"/> objects which represent the versions of a document.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedAudit permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<DocumentVersion> GetDocumentVersionsByDeletedDocType(Guid documentTypeId);

        /// <summary>
        /// Retrieve a specific version of a document
        /// </summary>
        /// <param name="documentVersionId">The id of the version of document</param>
        /// <returns>The <see cref="DocumentVersion"/> object which represents the version of a document.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedAudit permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        DocumentVersion GetDocumentVersion(Guid documentVersionId);

        /// <summary>
        /// Retrieve all document types which were deleted from CloudECM
        /// </summary>
        /// <returns>A list of <see cref="DocumentTypeVersion"/> objects represent for the deleted document types</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedAudit permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<DocumentTypeVersion> GetDocumentTypeVersions();

        /// <summary>
        /// Retrieve a document type which was deleted from CloudECM
        /// </summary>
        /// <param name="documentTypeId">The id of a deleted document type</param>
        /// <returns>The <see cref="DocumentTypeVersion"/> object represents for the deleted document type</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedAudit permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        DocumentTypeVersion GetDocumentTypeVersion(Guid documentTypeId);

        /// <summary>
        /// Get the latest version of a document which is deleted from the system.
        /// </summary>
        /// <param name="documentId">The id of a document need to find the latest version</param>
        /// <returns>The <see cref="DocumentVersion"/> object which represents the version of a document.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedAudit permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        DocumentVersion GetLatestDeletedDocumentVersion(Guid documentId);

        /// <summary>
        /// Retrieve the specific version of a deleted document
        /// </summary>
        /// <param name="docVersionId">The id of the version need to be retrieve</param>
        /// <returns>The <see cref="DocumentVersion"/> object which represents the version of a document.</returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedAudit permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        DocumentVersion GetVersionOfDeletedDocument(Guid docVersionId);

        /// <summary>
        /// Retrieve all version of deleted documents which belong to a document type isn't deleted.
        /// </summary>
        /// <param name="documentTypeId">The live document type.</param>
        /// <returns></returns>
        /// <remarks>
        /// <list type="bullet">
        /// <item>
        ///     <description>To use this method, the client proxy must pass the credential into the header of service request message. The credential includes user name, password hash (is the Password property of <see cref="User"/> object which was returned by the <see cref="Login"/> method) and client host.</description>
        /// </item>
        /// <item>
        ///     <description>The login user must have AllowedAudit permission in <see cref="AuditPermission"/> to call this method, otherwise <see cref="FaultException"/> exception will be thrown.</description>
        /// </item>
        /// </list>
        /// </remarks>
        /// <example>
        /// See the example in <see cref="ChangePassword"/> to see how to call this method.
        /// </example>
        [OperationContract]
        List<DocumentVersion> GetDeletedDocWithExistingDocType(Guid documentTypeId);

        #endregion

        #region Logging

        /// <summary>
        /// This method is used internally
        /// </summary>
        /// <param name="message"></param>
        /// <param name="stackTrace"></param>
        [OperationContract]
        void Log(string message, string stackTrace);

        #endregion
    }
}